#!/usr/bin/env node

// In case it is trying to unlink but the node modules are not installed yet.
process.on('uncaughtException', (e) => {
  console.error(e);
  process.exit();
});

var fs = require('fs');
var fse = require('node-fs-extra');
var argv = require('yargs')
    .command('init <project-name>', 'Bootstrap new testcase.')
    .command('run', 'Start the current testcase.')
    .command('link', 'Symlinks the global rawhide installation into the node_modules directory.')
    .command('unlink', 'Unlinks rawhide installation from your node_modules directory.')
    .command('add', 'Add a model, adapter or database to your testcase.')
    .demand(1).argv;
var inquirer = require('inquirer');
var path = require('path');
var rawhideDir = path.resolve(__dirname, '../');

// Create a standard test scenario.
if (argv._[0] === 'init') {
  if (!argv._[1]) {
    return console.error('Please specify a name');
  }
  var targetDir = `./${argv._[1]}`;

  if (existsSync(targetDir)) {
    return console.error('Directory already exists.');
  }

  fs.mkdirSync(targetDir);
  fs.mkdirSync(`${targetDir}/adapters`);
  fs.mkdirSync(`${targetDir}/models`);
  fs.mkdirSync(`${targetDir}/workloads`);
  fse.copySync(`${rawhideDir}/database.json`, `${targetDir}/database.json`);
  fse.copySync(`${rawhideDir}/parameters.json`, `${targetDir}/parameters.json`);
  fse.copySync(`${rawhideDir}/adapters/MongoDBBasicAdapter.js`, `${targetDir}/adapters/MongoDBBasicAdapter.js`);
  fse.copySync(`${rawhideDir}/models/BasicModel.js`, `${targetDir}/models/BasicModel.js`);
  fse.copySync(`${rawhideDir}/workloads/BasicWorkload.js`, `${targetDir}/workloads/BasicWorkload.js`);
  fse.writeJSONSync(`${targetDir}/package.json`, {
    name: "rawhide-test-case",
    version: "0.0.0",
    author: "",
    description: "",
    scripts: {
      postinstall: "rawhide link"
    }
  });

  createSymlinkSyncToGlobal(targetDir);

  return console.log(`Initialized project ${argv._[1]}.`);
}

// Run the test case from the current directory.
// TODO: Maybe add extra checks to make sure it's
// a valid rawhide test case?
if (argv._[0] === 'run') {
  return require(`${rawhideDir}/index.js`);
}

// Create a symlink in the current project to the
// rawhide framework.
if (argv._[0] === 'link') {
  createSymlinkSyncToGlobal('./');

  return console.log('Linked the Rawhide project into your node_modules directory');
}

// Create a symlink in the current project to the
// rawhide framework.
if (argv._[0] === 'unlink') {
  var to = path.resolve('./node_modules/rawhide');

  if (existsSync(to)) {
    fs.unlinkSync(to);
  }

  return console.log('Removed the Rawhide project from your node_modules directory');
}

// Add a model or adapter through the CLI. Just a quick pieve, this could be cleaner.
if (argv._[0] === 'add') {
  var supported = {
    'Model': [`models/`, 'BasicModel'],
    'Adapter': [`adapters/`, 'MongoDBBasicAdapter']
  };

  return inquirer.prompt([{
    name: 'value',
    type: 'list',
    message: 'What would you like to add?',
    choices: ['Model', 'Adapter', 'Database'],
  }], (type) => {
    var fromFile;

    if (!(fromFile = supported[type.value])) {
      return console.error('Type not yet supported');
    }

    inquirer.prompt({
      name: 'value',
      message: `What is the name of your ${type.value}?`,
      validate: (input) => !!input
    }, (name) => {
      var file = fs.readFileSync(`${rawhideDir}/${fromFile[0]}${fromFile[1]}.js`, 'utf8');

      name = name.value.charAt(0).toUpperCase() + name.value.slice(1) + type.value;
      fs.writeFileSync(`./${fromFile[0]}/${name}.js`, file.replace(new RegExp(fromFile[1], 'g'), name));
    });
  });
}

/**
 * Create a symlink in node_modules to the global rawhide directory.
 */
function createSymlinkSyncToGlobal(to) {
  var source;

  // Target directory must have a package.json file.
  if (!existsSync(path.resolve(to, './package.json'))) {
    throw 'No ./package.json file found in current working directory.';
  }

  // Ensure it has a node_modules folder.
  fse.mkdirsSync(path.resolve(to, './node_modules'));

  source = rawhideDir;
  to = path.resolve(to, './node_modules/rawhide');

  // Cherry picked from https://github.com/npm/npm/blob/master/lib/utils/link.js
  if (process.platform !== 'win32') {

    // junctions on windows must be absolute
    source = path.relative(path.dirname(to), rawhideDir);

    // if there is no folder in common, then it will be much
    // longer, and using a relative link is dumb.
    if (source.length >= rawhideDir.length) {
      source = rawhideDir;
    }
  }

  if (existsSync(to)) {
    fs.unlinkSync(to);
  }
  fs.symlinkSync(source, to, 'junction');
}

/**
 * fs.existsSync is deprecated. Implement our own basic one.
 */
function existsSync(to) {
  try {
    return !!fs.lstatSync(to);
  } catch (e) {
    return null;
  }
}